Storage Concepts:

# create EC2 instance 
aws ec2 run-instances \
--image-id  ami-0d8f6eb4f641ef691 \
--instance-type t2.micro \
--key-name Maven \
--security-group-ids sg-0fdb98f6c7ef87ef1 \
--subnet-id subnet-0e4a18844e6e2ab45 \
--associate-public-ip-address

"InstanceId": "i-03ca7b9fd229b060d",

# create volume
aws ec2 create-volume \
    --volume-type gp2 \
    --size 1 \
    --availability-zone us-east-2a

 "VolumeId": "vol-052e44743d50591a2",

# Attach volume to EC2 instance
aws ec2 attach-volume --volume-id vol-052e44743d50591a2 --instance-id i-03ca7b9fd229b060d --device /dev/sdf

# Use the lsblk command to view your available disk devices and their mount points (if applicable) to help you determine the 
correct device name to use. The output of lsblk removes the /dev/ prefix from full device paths.
The following is example output for a T2 instance. The root device is /dev/xvda. The attached volume is /dev/xvdf,
which is not yet mounted.

[ec2-user@ip-10-10-0-235 ~]$ lsblk
NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
xvda    202:0    0   8G  0 disk
└─xvda1 202:1    0   8G  0 part /
xvdf    202:80   0   1G  0 disk

# Determine whether there is a file system on the volume. New volumes are raw block devices, and you must create 
a file system on them before you can mount and use them. Volumes that have been restored from snapshots likely have
a file system on them already; if you create a new file system on top of an existing file system, the operation overwrites your data.
Use the file -s command to get information about a device, such as its file system type. If the output shows simply
data, as in the following example output, there is no file system on the device and you must create one.

[ec2-user@ip-10-10-0-235 ~]$ sudo file -s /dev/xvdf
/dev/xvdf: data

#  If you discovered that there is a file system on the device in the previous step, skip this step. If you have an
 empty volume, 
use the mkfs -t command to create a file system on the volume.

[ec2-user@ip-10-10-0-235 ~]$ sudo mkfs -t ext4 /dev/xvdf
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 262144 blocks
13107 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376

Allocating group tables: done
Writing inode tables: done
Creating journal (8192 blocks): done
Writing superblocks and filesystem accounting information: done

#  create a mount point directory for the volume and mount the volume at the directory you created
[ec2-user@ip-10-10-0-235 ~]$ mkdir myimages
[ec2-user@ip-10-10-0-235 ~]$ sudo mount /dev/xvdf /home/ec2-user/myimages/
[ec2-user@ip-10-10-0-235 ~]$ df -h
Filesystem      Size  Used Avail Use% Mounted on
devtmpfs        475M     0  475M   0% /dev
tmpfs           492M     0  492M   0% /dev/shm
tmpfs           492M  392K  492M   1% /run
tmpfs           492M     0  492M   0% /sys/fs/cgroup
/dev/xvda1      8.0G  1.3G  6.8G  16% /
tmpfs            99M     0   99M   0% /run/user/1000
/dev/xvdf       976M  2.6M  907M   1% /home/ec2-user/myimages

# Automatically Mount an Attached Volume After Reboot procedure is https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html#ebs-format-mount-volume
# Refer this for resizing the volume https://github.com/asquarezone/AWSClassRoom/blob/master/Administration/Storage/june19/storageintro.md

Task:

1) Create EFS
2) Create 2 ec2 instances in 3 AZs, each instance has 1 seperate additional disk iwth 1 Gb.
3) Create /project folder in each instance and mount to EFS.

Sol:
1) Created EFS using aws console

2. a) # create EC2 instance 
aws ec2 run-instances \
--image-id  ami-0d8f6eb4f641ef691 \
--instance-type t2.micro \
--key-name Maven \
--security-group-ids sg-0fdb98f6c7ef87ef1 \
--subnet-id subnet-0e4a18844e6e2ab45 \
--associate-public-ip-address

"InstanceId": "i-03ca7b9fd229b060d"

b)# create EC2 instance 
aws ec2 run-instances \
--image-id  ami-0d8f6eb4f641ef691 \
--instance-type t2.micro \
--key-name Maven \
--security-group-ids sg-0fdb98f6c7ef87ef1 \
--subnet-id subnet-07bb0087f7250d706 \
--associate-public-ip-address

"InstanceId": "i-0021159f54c382a29"

c) # create volume
aws ec2 create-volume \
    --volume-type gp2 \
    --size 1 \
    --availability-zone us-east-2b

 "VolumeId": "vol-0489d8f957de5f3a0",

# Attach volume to EC2 instance
aws ec2 attach-volume --volume-id vol-0489d8f957de5f3a0 --instance-id i-0021159f54c382a29 --device /dev/sdf

# format and mount the newly created volume as per above instructions

3) sudo yum install -y amazon-efs-utils
sudo mkdir project
sudo mount -t /home/ec2-user/project fs-6eceeb17:/project -- ignore not working

sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-6eceeb17.efs.us-east-2.amazonaws.com:/ project